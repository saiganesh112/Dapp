import React, { useEffect, useState } from "react";
import { jsPDF } from "jspdf";
import { student_dapp_backend } from "declarations/student_dapp_backend";

export default function App() {
  const [students, setStudents] = useState([]);
  const [form, setForm] = useState({ name: "", total_marks: "", subjects: "" });

  const fetchStudents = async () => {
    try {
      const list = await student_dapp_backend.list_students();
      list.sort((a, b) => a.name.localeCompare(b.name, undefined, { sensitivity: 'base' }));
      setStudents(list);
    } catch (err) {
      console.error("Failed to fetch students:", err);
      alert("Error fetching students. Check console.");
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };

  const handleAddOrUpdate = async () => {
    try {
      const student = {
        name: form.name.trim(),
        total_marks: Number(form.total_marks),
        subjects: Number(form.subjects),
      };

      if (!student.name) {
        alert("Name is required.");
        return;
      }
      if (
        isNaN(student.total_marks) ||
        isNaN(student.subjects) ||
        student.subjects <= 0
      ) {
        alert("Please enter valid Total Marks and Subjects (Subjects > 0).");
        return;
      }

      await student_dapp_backend.add_student(student);
      await fetchStudents();
      setForm({ name: "", total_marks: "", subjects: "" });
    } catch (err) {
      console.error("Failed to add/update student:", err);
      alert("Error adding/updating student. Check console.");
    }
  };

  const handleDelete = async (name) => {
    try {
      await student_dapp_backend.delete_student(name);
      await fetchStudents();
    } catch (err) {
      console.error("Failed to delete student:", err);
      alert("Error deleting student. Check console.");
    }
  };

  useEffect(() => {
    fetchStudents();
  }, []);

  const generatePDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    if (students.length === 0) {
      doc.setFontSize(18);
      doc.text(
        "No students to show report card.",
        pageWidth / 2,
        pageHeight / 2,
        { align: "center" }
      );
      doc.save("student_report_card.pdf");
      return;
    }

 
    const sortedStudents = [...students].sort((a, b) =>
      a.name.localeCompare(b.name, undefined, { sensitivity: "base" })
    );

    sortedStudents.forEach((student, index) => {
      if (index > 0) doc.addPage();

      // Header
      doc.setFontSize(22);
      doc.text("Student Report Card", pageWidth / 2, 20, { align: "center" });

      // Box container
      const startX = 20;
      let startY = 40;
      const boxWidth = pageWidth - 40;
      const boxHeight = 90;

      doc.setDrawColor(0);
      doc.setLineWidth(0.5);
      doc.rect(startX, startY, boxWidth, boxHeight);

      // Student Name
      doc.setFontSize(16);
      doc.text("Name:", startX + 10, startY + 20);
      doc.setFontSize(16);
      doc.text(student.name, startX + 50, startY + 20);

      // Total Marks
      doc.setFontSize(14);
      doc.text("Total Marks:", startX + 10, startY + 40);
      doc.text(student.total_marks.toString(), startX + 50, startY + 40);

      // Subjects
      doc.text("Subjects:", startX + 10, startY + 60);
      doc.text(student.subjects.toString(), startX + 50, startY + 60);

      // Average and Grade Calculation
      const average = (student.total_marks / student.subjects).toFixed(2);
      let grade = "D";
      if (average >= 90) grade = "A";
      else if (average >= 75) grade = "B";
      else if (average >= 60) grade = "C";

      doc.text("Average:", startX + 10, startY + 80);
      doc.text(average, startX + 50, startY + 80);

      doc.text("Grade:", startX + 120, startY + 80);
      doc.setFontSize(20);
      doc.setTextColor(0, 102, 204); 
      doc.text(grade, startX + 160, startY + 80);
      doc.setTextColor(0);

      // Footer
      doc.setFontSize(10);
      doc.text(
        "Generated by Student Report Card Dapp",
        pageWidth / 2,
        pageHeight - 20,
        { align: "center" }
      );
    });

    doc.save("student_report_card.pdf");
  };

  return (
    <div style={{ padding: "2rem", fontFamily: "Arial, sans-serif" }}>
      <h1>ðŸ“˜ Student Report Card Dapp</h1>

      <div style={{ marginBottom: "1rem" }}>
        <input
          name="name"
          placeholder="Name"
          value={form.name}
          onChange={handleChange}
        />
        <input
          name="total_marks"
          placeholder="Total Marks"
          type="number"
          value={form.total_marks}
          onChange={handleChange}
        />
        <input
          name="subjects"
          placeholder="Subjects"
          type="number"
          value={form.subjects}
          onChange={handleChange}
        />
        <button onClick={handleAddOrUpdate}>Add / Update</button>
      </div>

      <h2>ðŸ“‹ Student List</h2>
      {students.length === 0 ? (
        <p>No students yet.</p>
      ) : (
        <ul>
          {students.map((student, i) => {
            const average = (student.total_marks / student.subjects).toFixed(2);
            const grade =
              average >= 90
                ? "A"
                : average >= 75
                ? "B"
                : average >= 60
                ? "C"
                : "D";
            return (
              <li key={i}>
                <strong>{student.name}</strong>: {student.total_marks} marks /{" "}
                {student.subjects} subjects â†’ Avg: {average} â†’ Grade: {grade}{" "}
                <button onClick={() => handleDelete(student.name)}>Delete</button>
              </li>
            );
          })}
        </ul>
      )}

      <button onClick={generatePDF} style={{ marginTop: "1rem" }}>
        Download PDF Report Cards
      </button>
    </div>
  );
}
